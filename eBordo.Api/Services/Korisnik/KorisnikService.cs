using AutoMapper;
using eBordo.Api.Database;
using eBordo.Api.Services.BaseCRUDService;
using eBordo.Api.Services.BaseREADService;
using eBordo.Model.Helpers;
using eBordo.Model.Requests.Korisnik;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace eBordo.Api.Services.Korisnik
{
    public class KorisnikService: BaseCRUDService<eBordo.Model.Models.Korisnik, eBordo.Api.Database.Korisnik, object, KorisnikInsertRequest, KorisnikUpdateRequest>, IKorisnikService
    {
        public KorisnikService(eBordoContext db, IMapper mapper): base(db, mapper) { }

        public override Model.Models.Korisnik Insert(KorisnikInsertRequest request)
        {
            PasswordGenerator passwordGenerator = new PasswordGenerator();

            string autoGeneratedPassword = passwordGenerator.GeneratePassword();
            string saltPassword = passwordGenerator.GenerateSalt();

            string inputMail = request.ime.ToLower() + "." + request.prezime.ToLower() + "@fksarajevo.ba";

            string decomposed = inputMail.Normalize(NormalizationForm.FormD);
            char[] filtered = decomposed
                .Where(c => char.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)
                .ToArray();

            string email = new String(filtered);

            email = email.Replace("đ", "dj");

            eBordo.Api.Database.Korisnik korisnik = new eBordo.Api.Database.Korisnik
            {
                ime = request.ime,
                prezime = request.prezime,
                datumRodjenja = request.datumRodjenja,
                adresa = request.adresa,
                telefon = request.telefon,
                email = request.email,
                korisnickoIme = email,
                lozinkaSalt = saltPassword,
                lozinkaHash = passwordGenerator.GenerateHash(saltPassword,autoGeneratedPassword),
                //lozinkaHash = passwordGenerator.GenerateHash(saltPassword, "test1234"),
                drzavljanstvoId = request.drzavljanstvoId,
                gradRodjenjaId = request.gradRodjenjaId,
            };
    
            _db.Add(korisnik);
            _db.SaveChanges();

            return _mapper.Map<eBordo.Model.Models.Korisnik>(korisnik);
        }
        public override Model.Models.Korisnik Update(int id, KorisnikUpdateRequest request)
        {
            var korisnik = _db.korisnici.Find(id);

            korisnik.adresa = request.adresa;
            korisnik.email = request.email;
            korisnik.telefon = request.telefon;

            return _mapper.Map<eBordo.Model.Models.Korisnik>(korisnik);
        }
        public override Model.Models.Korisnik Delete(int id)
        {
            var entity = _db.korisnici.Where(s => s.korisnikId == id).FirstOrDefault();

            _db.Remove(entity);
            _db.SaveChanges();

            return _mapper.Map<eBordo.Model.Models.Korisnik>(entity);
        }
    }
}
