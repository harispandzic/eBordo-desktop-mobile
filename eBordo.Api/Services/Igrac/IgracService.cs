using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using eBordo.Api.Database;
using eBordo.Api.Services.BaseCRUDService;
using eBordo.Model.Requests.Igrac;
using Microsoft.EntityFrameworkCore;
using eBordo.Model.Helpers;

namespace eBordo.Api.Services.Igrac
{
    public class IgracService: BaseCRUDService<eBordo.Model.Models.Igrac, eBordo.Api.Database.Igrac, eBordo.Model.Requests.Igrac.IgracSearchObject, eBordo.Model.Requests.Igrac.IgracInsertRequest, eBordo.Model.Requests.Igrac.IgracUpdateRequest>, IIgracService
    {
        //TO:DO
        //Spašavanje tačne pozicije i noge
        //Slanje emaila za prijavu i konfirmaciju podataka
        //Spašavanje tačne lozinke
        //Logika za slanje slike na server
        //Validacija podataka
        //Pregledati detaljno
        //Filtirranje emaila
        public IgracService(eBordoContext db, IMapper mapper) : base(db, mapper) { }

        public override IEnumerable<Model.Models.Igrac> Get(IgracSearchObject search = null)
        {
            var entity = _db.Set<Database.Igrac>()
                .Include(s => s.korisnik)
                .Include(s => s.korisnik.drzavljanstvo)
                .Include(s => s.korisnik.gradRodjenja.drzava)
                .Include(s => s.igracStatistika)
                .Include(s => s.igracSkills)
                .Include(s => s.ugovor)
                .AsQueryable();

            if(search!= null && !string.IsNullOrEmpty(search.ime))
            {
                entity = entity.Where(s => s.korisnik.ime.StartsWith(search.ime));
            }

            var result = entity.ToList();

            return _mapper.Map<List<Model.Models.Igrac>>(result);
        }
        public override Model.Models.Igrac GetById(int id)
        {
            var entity = _db.igraci.Where(s => s.igracId == id)
                .Include(s => s.korisnik)
                .Include(s => s.korisnik.drzavljanstvo)
                .Include(s => s.korisnik.gradRodjenja.drzava)
                .Include(s => s.igracStatistika)
                .Include(s => s.igracSkills)
                .Include(s => s.ugovor)
                .AsQueryable();

            var result = entity.FirstOrDefault();

            return _mapper.Map<eBordo.Model.Models.Igrac>(result);

        }
        public override Model.Models.Igrac Insert(IgracInsertRequest request)
        {
            PasswordGenerator passwordGenerator = new PasswordGenerator();

            string autoGeneratedPassword = passwordGenerator.GeneratePassword();
            string saltPassword = passwordGenerator.GenerateSalt();

            Korisnik korisnik = new Korisnik
            {
                ime = request.korisnik.ime,
                prezime = request.korisnik.prezime,
                datumRodjenja = request.korisnik.datumRodjenja,
                adresa = request.korisnik.adresa,
                telefon = request.korisnik.telefon,
                email = request.korisnik.email,
                korisnickoIme = request.korisnik.ime + "." + request.korisnik.prezime + "@fksarajevo.ba",
                lozinkaSalt = saltPassword,
                //lozinkaHash = passwordGenerator.GenerateHash(saltPassword,autoGeneratedPassword),
                lozinkaHash = passwordGenerator.GenerateHash(saltPassword, "test1234"),
                drzavljanstvoId = request.korisnik.drzavljanstvoId,
                gradRodjenjaId = request.korisnik.gradRodjenjaId,
                isIgrac = true,
                isAdmin = false,
                isTrener = false
            };

            _db.Add(korisnik);
            _db.SaveChanges();

            IgracStatistika statistika = new IgracStatistika();
            _db.igracStatistika.Add(statistika);
            _db.SaveChanges();

            IgracSkills skills = new IgracSkills();
            _db.igracSkills.Add(skills);
            _db.SaveChanges();

            Ugovor ugovor = new Ugovor();
            _db.ugovori.Add(ugovor);
            _db.SaveChanges();

            //Pozicija pozicija = (Pozicija)Enum.Parse(typeof(Pozicija), request.pozicija);
            //BoljaNoga boljaNoga = (BoljaNoga)Enum.Parse(typeof(BoljaNoga), request.noga);
            //SLIKA

            eBordo.Api.Database.Igrac igrac = new eBordo.Api.Database.Igrac
            {
                visina = request.visina,
                tezina = request.tezina,
                brojDresa = request.brojDresa,
                trzisnaVrijednost = request.trzisnaVrijednost,
                slika = request.slika,
                datumPristupaKlubu = request.datumPristupaKlubu,
                pozicija = Pozicija.GOLMAN,
                boljaNoga = BoljaNoga.DESNA,
                igracStatistika = statistika,
                igracSkills = skills,
                ugovor = ugovor,
                korisnik = korisnik
            };

            _db.igraci.Add(igrac);
            _db.SaveChanges();

            statistika.igracId = igrac.igracId;
            _db.SaveChanges();

            skills.igracId = igrac.igracId;
            _db.SaveChanges();

            ugovor.igracId = igrac.igracId;
            _db.SaveChanges();

            korisnik.igracId = igrac.igracId;
            _db.SaveChanges();

            var entity = _db.igraci.Where(s => s.igracId == igrac.igracId).AsQueryable();

            var result = entity.FirstOrDefault();

            return _mapper.Map<eBordo.Model.Models.Igrac>(result);
        }
        public override Model.Models.Igrac Update(int id, eBordo.Model.Requests.Igrac.IgracUpdateRequest request)
        {
            var entity = _db.igraci.Where(s => s.igracId == id)
                .Include(s => s.korisnik)
                .Include(s => s.korisnik.drzavljanstvo)
                .Include(s => s.korisnik.gradRodjenja.drzava)
                .Include(s => s.igracStatistika)
                .Include(s => s.igracSkills)
                .Include(s => s.ugovor)
                .SingleOrDefault();

            entity.korisnik.adresa = request.korisnikUpdateRequest.adresa;
            entity.korisnik.email = request.korisnikUpdateRequest.email;
            entity.korisnik.telefon = request.korisnikUpdateRequest.telefon;
            entity.visina = request.visina;
            entity.tezina = request.tezina;
            entity.brojDresa = request.brojDresa;
            entity.trzisnaVrijednost = request.trzisnaVrijednost;
            entity.slika = request.slika;
            entity.pozicija = Pozicija.KRILO;

            _db.SaveChanges();

            return _mapper.Map<eBordo.Model.Models.Igrac>(entity);
        }
    }
}
